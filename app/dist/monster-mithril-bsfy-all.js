require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var ApiBase, form_object_to_form_data, has_attached_file, parameter_name,
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

parameter_name = function(root) {
  var name;
  name = root[0];
  if (root.length > 1) {
    name += '[' + root.slice(1).join('][') + ']';
  }
  return name;
};

has_attached_file = function(value) {
  var j, k, len, result, v, vv;
  result = false;
  if (typeof value === 'object' && !(value instanceof File)) {
    for (k in value) {
      if (!hasProp.call(value, k)) continue;
      v = value[k];
      result |= has_attached_file(v);
    }
  } else if (typeof value === 'array') {
    for (j = 0, len = v.length; j < len; j++) {
      vv = v[j];
      result |= has_attached_file(vv);
    }
  } else {
    result |= value instanceof File;
  }
  return result;
};

form_object_to_form_data = function(value, fd, root) {
  var i, j, k, len, v, vv;
  if (fd == null) {
    fd = null;
  }
  if (root == null) {
    root = [];
  }
  if (!fd) {
    fd = new FormData();
  }
  if (typeof value === 'object' && !(value instanceof File)) {
    for (k in value) {
      if (!hasProp.call(value, k)) continue;
      v = value[k];
      form_object_to_form_data(v, fd, root.concat([k]));
    }
  } else if (typeof value === 'array') {
    for (vv = j = 0, len = value.length; j < len; vv = ++j) {
      i = value[vv];
      form_object_to_form_data(vv, fd, root.concat([i]));
    }
  } else {
    fd.append(parameter_name(root), value);
  }
  return fd;
};

ApiBase = (function() {
  ApiBase.prototype._get = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'GET', name, data, success, error);
  };

  ApiBase.prototype._post = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'POST', name, data, success, error);
  };

  ApiBase.prototype._put = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'PUT', name, data, success, error);
  };

  ApiBase.prototype._delete = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'DELETE', name, data, success, error);
  };

  ApiBase.prototype._request = function(tn, a, kind, url, data, success, error) {
    var ev_error, ev_success, form_data, serialize;
    ev_success = function(data) {
      $broadcast(tn + "/" + a, data);
      if (success) {
        success(data);
      }
      return data;
    };
    ev_error = function(data) {
      $broadcast(tn + "/" + a + "#err", data);
      if (error) {
        error(data);
      }
      return data;
    };
    if (this.preload) {
      data = _iso_preload[tn + "/" + a];
      ev_success(data);
      return function() {
        return data;
      };
    } else {
      if (has_attached_file(data)) {
        form_data = form_object_to_form_data(data);
        serialize = function(value) {
          return value;
        };
        return m.request({
          method: kind,
          url: url,
          data: form_data,
          serialize: serialize,
          config: this._config
        }).then(ev_success, error);
      } else {
        return m.request({
          method: kind,
          url: url,
          data: data,
          config: this._config
        }).then(ev_success, error);
      }
    }
  };

  ApiBase.prototype._config = function(xhr) {
    return xhr.setRequestHeader('X-CSRF-Token', $dom.get("meta[name='csrf-token']")[0].content);
  };

  ApiBase.prototype._extract_id = function(model) {
    if (typeof model === 'string' || typeof model === 'number') {
      return model;
    } else {
      return model.id;
    }
  };

  ApiBase.prototype.path = function() {
    var a, args, j, len, path;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    path = [];
    if (this.namespace) {
      path.push(this.namespace);
    }
    for (j = 0, len = args.length; j < len; j++) {
      a = args[j];
      path.push(a);
    }
    path = path.join('/');
    return "/" + path;
  };

  ApiBase.prototype._resource = function(tn, options) {
    var action, j, len, method, o, only, ref, ref1, ref2, results;
    only = {
      index: true,
      "new": true,
      create: true,
      show: true,
      edit: true,
      update: true,
      destroy: true
    };
    if (typeof options === 'string') {
      only = {
        index: false,
        "new": false,
        create: false,
        show: false,
        edit: false,
        update: false,
        destroy: false
      };
      ref = options.split(' ');
      for (j = 0, len = ref.length; j < len; j++) {
        o = ref[j];
        only[o] = true;
      }
    }
    this[tn] = {};
    if (only.index) {
      this[tn].index = (function(_this) {
        return function(params, success, error) {
          return _this._get(tn, 'index', _this.path(tn), params, success, error);
        };
      })(this);
    }
    if (only["new"]) {
      this[tn]["new"] = (function(_this) {
        return function(params, success, error) {
          return _this._get(tn, 'new', _this.path(tn, 'new'), params, success, error);
        };
      })(this);
    }
    if (only.create) {
      this[tn].create = (function(_this) {
        return function(params, success, error) {
          return _this._post(tn, 'create', _this.path(tn), params, success, error);
        };
      })(this);
    }
    if (only.show) {
      this[tn].show = (function(_this) {
        return function(model, params, success, error) {
          return _this._get(tn, 'show', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    if (only.edit) {
      this[tn].edit = (function(_this) {
        return function(model, params, success, error) {
          return _this._get(tn, 'edit', _this.path(tn, _this._extract_id(model), 'edit'), params, success, error);
        };
      })(this);
    }
    if (only.update) {
      this[tn].update = (function(_this) {
        return function(model, params, success, error) {
          return _this._put(tn, 'update', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    if (only.destroy) {
      this[tn].destroy = (function(_this) {
        return function(model, params, success, error) {
          return _this._delete(tn, 'destroy', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    ref1 = options.collection;
    for (action in ref1) {
      method = ref1[action];
      this._collection(tn, action, method);
    }
    ref2 = options.member;
    results = [];
    for (action in ref2) {
      method = ref2[action];
      results.push(this._member(tn, action, method));
    }
    return results;
  };

  ApiBase.prototype._collection = function(tn, a, method) {
    var fun, name;
    name = this.path(tn, a);
    fun = (function() {
      switch (method) {
        case 'get':
          return (function(_this) {
            return function(params, success, error) {
              return _this._get(tn, a, name, params, success, error);
            };
          })(this);
        case 'post':
          return (function(_this) {
            return function(params, success, error) {
              return _this._post(tn, a, name, params, success, error);
            };
          })(this);
        case 'put':
          return (function(_this) {
            return function(params, success, error) {
              return _this._put(tn, a, name, params, success, error);
            };
          })(this);
        case 'destroy':
          return (function(_this) {
            return function(params, success, error) {
              return _this._delete(tn, a, name, params, success, error);
            };
          })(this);
      }
    }).call(this);
    return this[tn][a] = fun;
  };

  ApiBase.prototype._member = function(tn, a, method) {
    var fun;
    fun = (function() {
      switch (method) {
        case 'get':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._get(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'post':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._post(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'put':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._put(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'destroy':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._delete(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
      }
    }).call(this);
    return this[tn][a] = fun;
  };

  function ApiBase() {
    this._member = bind(this._member, this);
    this._collection = bind(this._collection, this);
    this._resource = bind(this._resource, this);
    this.path = bind(this.path, this);
    this._extract_id = bind(this._extract_id, this);
    this._config = bind(this._config, this);
    this._request = bind(this._request, this);
    this._delete = bind(this._delete, this);
    this._put = bind(this._put, this);
    this._post = bind(this._post, this);
    this._get = bind(this._get, this);
    var options, ref, table_name;
    this.preload = typeof _isomorphic !== 'undefined';
    ref = this.resources;
    for (table_name in ref) {
      options = ref[table_name];
      this._resource(table_name, options);
    }
  }

  return ApiBase;

})();

module.exports = ApiBase;


},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $comp, $component,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$comp = function(tag, name, data) {
  var base, names;
  names = name.split('/');
  if ((base = app.store)[name] == null) {
    base[name] = {};
  }
  return m(tag, app[names[0]][names[1]].view(app[names[0]][names[1]].controller(data)));
};

$component = function() {
  var __fun, args, definition, i, name, name1, names, super_def;
  name = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), definition = arguments[i++];
  __fun;
  names = name.split('/');
  app.store[names[0] + "/" + names[1]] = {};
  if (names.length !== 1) {
    if ($$[name1 = names[0]] == null) {
      $$[name1] = {};
    }
  }
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      this._inject = bind(this._inject, this);
      this.store = bind(this.store, this);
      this.$export = bind(this.$export, this);
      this.$on = bind(this.$on, this);
      this._inject(args);
      this.__fun = __fun;
      this.$ = {};
      this._name = name;
      this._controller = names[0];
      this._action = names[1];
      this.Api = new app.services.Api();
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.$on = function(name, fun) {
      return $register(this._name, name, fun);
    };

    _Class.prototype.$export = function() {
      var arg, args, j, len, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        arg = args[j];
        results.push(this.$[arg] = this[arg]);
      }
      return results;
    };

    _Class.prototype.param = function(name) {
      return m.route.param(name);
    };

    _Class.prototype.store = function(val, input) {
      var key;
      key = this._controller + "/" + this._action;
      if (input === void 0) {
        return app.store[key][val];
      } else {
        return app.store[key][val] = input;
      }
    };

    _Class.prototype._inject = function(args) {
      var arg_name, attr, j, len, results;
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        arg_name = args[j];
        if (typeof arg_name === 'object') {
          results.push((function() {
            var results1;
            results1 = [];
            for (attr in arg_name) {
              results1.push(this[arg_name[attr]] = new app.services[arg_name[attr]]);
            }
            return results1;
          }).call(this));
        } else {
          results.push(this[arg_name] = new app.services[arg_name]);
        }
      }
      return results;
    };

    return _Class;

  })(definition);
  __fun = function() {
    var ctrl;
    ctrl = new super_def(arguments).$;
    if (names.length === 1) {
      return app.shared[names[0]].view(ctrl);
    } else {
      return app[names[0]][names[1]].view(ctrl);
    }
  };
  if (names.length === 1) {
    return $$[names[0]] = __fun;
  } else {
    return $$[names[0]][names[1]] = __fun;
  }
};

module.exports = {
  $comp: $comp,
  $component: $component
};


},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $controller,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$controller = function() {
  var __fun, args, base, definition, i, name, name1, name2, names, super_def;
  name = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), definition = arguments[i++];
  __fun;
  names = name.split('/');
  app.store[names[0] + "/" + names[1]] = {};
  if (app[name1 = names[0]] == null) {
    app[name1] = {};
  }
  if ((base = app[names[0]])[name2 = names[1]] == null) {
    base[name2] = {};
  }
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      this._inject = bind(this._inject, this);
      this.store = bind(this.store, this);
      this.$export = bind(this.$export, this);
      this.$on = bind(this.$on, this);
      this._inject(args);
      this.__fun = __fun;
      this.$ = {};
      this._name = name;
      this._controller = names[0];
      this._action = names[1];
      this.Api = new app.services.Api();
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.$on = function(name, fun) {
      return $register(this._name, name, fun);
    };

    _Class.prototype.$export = function() {
      var arg, args, j, len, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        arg = args[j];
        results.push(this.$[arg] = this[arg]);
      }
      return results;
    };

    _Class.prototype.param = function(name) {
      return m.route.param(name);
    };

    _Class.prototype.store = function(val, input) {
      var key;
      key = this._controller + "/" + this._action;
      if (input === void 0) {
        return app.store[key][val];
      } else {
        return app.store[key][val] = input;
      }
    };

    _Class.prototype._inject = function(args) {
      var arg_name, attr, j, len, results;
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        arg_name = args[j];
        if (typeof arg_name === 'object') {
          results.push((function() {
            var results1;
            results1 = [];
            for (attr in arg_name) {
              results1.push(this[arg_name[attr]] = new app.services[arg_name[attr]]);
            }
            return results1;
          }).call(this));
        } else {
          results.push(this[arg_name] = new app.services[arg_name]);
        }
      }
      return results;
    };

    return _Class;

  })(definition);
  __fun = function() {
    return new super_def(arguments).$;
  };
  return app[names[0]][names[1]].controller = __fun;
};

module.exports = $controller;


},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  "$dom": {
    get: function(sel) {
      return document.querySelectorAll(sel);
    },
    addClass: function(el, class_name) {
      if (el.classList) {
        return el.classList.add(class_name);
      } else {
        return el.className += ' ' + class_name;
      }
    },
    removeClass: function(el, class_name) {
      if (el.classList) {
        return el.classList.remove(class_name);
      } else {
        return el.className = el.className.replace(new RegExp('(^|\\b)' + class_name.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
      }
    }
  },
  "$loc": function(n) {
    return document.body.setAttribute('location', n);
  },
  "$stop": function(e) {
    if (e.prevDefault) {
      e.prevDefault();
    }
    if (e.stopPropagation) {
      e.stopPropagation();
    }
    e.cancelBubble = true;
    return e.returnValue = false;
  }
};


},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  "$broadcast": function(name, data) {
    var fun, key, ref, results;
    if (name !== "" && app.events[name]) {
      ref = app.events[name];
      results = [];
      for (key in ref) {
        fun = ref[key];
        if (fun) {
          results.push(fun(data));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  },
  "$register": function(_scope, name, fun) {
    var base;
    if ((base = app.events)[name] == null) {
      base[name] = {};
    }
    return app.events[name][_scope] = fun;
  }
};


},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $f;

$f = {};

module.exports = {
  "$filter": function(name, definition) {
    return $f[name] = definition;
  },
  "$f": $f
};


},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $layout;

$layout = (function(_this) {
  return function(ctrl, content, opts) {
    var data, kind;
    if (opts == null) {
      opts = {};
    }
    kind = opts.layout || 'application';
    data = {
      content: content,
      ctrl: ctrl
    };
    return app.layouts[kind].view(data);
  };
})(this);

module.exports = $layout;


},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $location;

$location = function() {
  var i, len, p, pair, pairs, result;
  pairs = location.search.slice(1).split('&');
  result = {};
  for (i = 0, len = pairs.length; i < len; i++) {
    pair = pairs[i];
    p = pair.split('=');
    result[p[0]] = decodeURIComponent(p[1] || '');
  }
  return result;
};

module.exports = $location;


},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $mixin;

$mixin = function(name, definition) {
  if (definition) {
    return app.mixins[name] = definition;
  } else {
    return app.mixins[name];
  }
};

module.exports = $mixin;


},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $model,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$model = function(name, definition) {
  var __fun, super_def;
  if (typeof definition === 'function') {
    super_def = (function(superClass) {
      extend(_Class, superClass);

      _Class.prototype.include = function(obj) {
        var included, key, ref, value;
        ref = obj.prototype;
        for (key in ref) {
          value = ref[key];
          this.$[key] = value;
        }
        included = obj.included;
        if (included) {
          included.apply(this.$);
        }
        return this;
      };

      function _Class(attrs) {
        if (attrs == null) {
          attrs = {};
        }
        this.reset = bind(this.reset, this);
        this.params = bind(this.params, this);
        this._init = bind(this._init, this);
        this.include = bind(this.include, this);
        this._init(attrs);
      }

      _Class.prototype._init = function(attrs) {
        var i, k, len, mixin, ref, ref1, ref2, results, v, val;
        this.$ = {
          _kind: name,
          params: this.params,
          reset: this.reset,
          fill: this.reset
        };
        this.$.id = m.prop(attrs.id || null);
        ref = this.columns;
        for (k in ref) {
          v = ref[k];
          val = attrs[k] || v;
          this.$[k] = m.prop(val);
        }
        if (this.instance) {
          ref1 = this.instance;
          for (k in ref1) {
            v = ref1[k];
            this.$[k] = v;
          }
        }
        if (this.mixins) {
          ref2 = this.mixins;
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            mixin = ref2[i];
            results.push(this.include(app.mixins[mixin]));
          }
          return results;
        }
      };

      _Class.prototype.params = function() {
        var attrs, k, ref, v;
        attrs = {};
        attrs.id = this.$.id();
        ref = this.columns;
        for (k in ref) {
          v = ref[k];
          attrs[k] = this.$[k]();
        }
        return attrs;
      };

      _Class.prototype.reset = function(attrs) {
        var k, ref, results, v, val;
        if (attrs == null) {
          attrs = {};
        }
        this.$.id(attrs.id || null);
        ref = this.columns;
        results = [];
        for (k in ref) {
          v = ref[k];
          val = attrs[k] || v;
          results.push(this.$[k](val));
        }
        return results;
      };

      return _Class;

    })(definition);
    __fun = function(attrs) {
      return new super_def(attrs).$;
    };
    return app.models[name] = __fun;
  } else {
    if (app.models[name]) {
      return new app.models[name](definition);
    } else {
      return null;
    }
  }
};

module.exports = $model;


},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $popup;

$popup = (function(_this) {
  return function(name, data, opts) {
    var content, ctrl, names;
    if (data == null) {
      data = {};
    }
    if (opts == null) {
      opts = {};
    }
    names = name.split('/');
    ctrl = app[names[0]][names[1]].controller(data);
    content = app[names[0]][names[1]].view(ctrl);
    ctrl.content = content;
    ctrl.opts = opts;
    return app.layouts.popup.view(ctrl);
  };
})(this);

module.exports = $popup;


},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $service,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$service = function() {
  var args, definition, i, name, super_def;
  name = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), definition = arguments[i++];
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(definition);
  return app.services[name] = super_def;
};

module.exports = $service;


},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$view = function(name, definition) {
  var __fun, base, name1, name2, names, super_def;
  names = name.split('/');
  if (app[name1 = names[0]] == null) {
    app[name1] = {};
  }
  if ((base = app[names[0]])[name2 = names[1]] == null) {
    base[name2] = {};
  }
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class(ctrl) {
      this.$ = ctrl;
    }

    _Class.prototype.param = function(name) {
      return m.route.param(name);
    };

    return _Class;

  })(definition);
  __fun = function(ctrl) {
    var content, klass;
    klass = new super_def(ctrl);
    content = klass.render();
    if (klass.layout) {
      $loc(names[0] + "_" + names[1]);
      if (klass.layout === true) {
        klass.layout = 'application';
      }
      if (klass.title) {
        document.title = klass.title();
      }
      return $layout(klass.$, content, {
        layout: klass.layout
      });
    } else {
      return content;
    }
  };
  return app[names[0]][names[1]].view = __fun;
};

module.exports = $view;


},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var Form,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Form = (function() {
  Form.prototype.pull = false;

  Form.prototype.params = function() {
    var attrs;
    attrs = {};
    attrs[("" + this.table_name).singularize()] = this.$.model.params();
    return attrs;
  };

  Form.prototype.attrs = function() {
    return {};
  };

  function Form(args) {
    this.destroy = bind(this.destroy, this);
    this.back = bind(this.back, this);
    this.can_pull = bind(this.can_pull, this);
    this.custom_success = bind(this.custom_success, this);
    this.create_failure = bind(this.create_failure, this);
    this.success = bind(this.success, this);
    this.destroy_success = bind(this.destroy_success, this);
    this.update_success = bind(this.update_success, this);
    this.create_success = bind(this.create_success, this);
    this.edit_success = bind(this.edit_success, this);
    this.new_success = bind(this.new_success, this);
    this._register = bind(this._register, this);
    this.submit = bind(this.submit, this);
    this.reset = bind(this.reset, this);
    this.attrs = bind(this.attrs, this);
    this.params = bind(this.params, this);
    var key, name, ref, val;
    name = this._controller + "_" + this._action;
    this.table_name || (this.table_name = this._controller);
    this.action || (this.action = this._action);
    if (this._action === 'form') {
      this.action = 'new';
    }
    if (this._action === 'form' && this.param('id')) {
      this.action = 'edit';
    }
    this.$.loading = false;
    if (args[0]) {
      if (!args[0][name]) {
        console.log('[Form] arguments:', args[0]);
        throw "[Form][" + this._controller + "/" + this._action + "] expected " + name + " for args";
      }
      if (!args[0][name].model) {
        throw "[Form][" + this._controller + "/" + this._action + "] expects model";
      }
      ref = args[0][name];
      for (key in ref) {
        val = ref[key];
        this.$[key] = val;
      }
    } else {
      this.$.model = $model(this._controller.classify());
    }
    this.$export('submit', 'back', 'destroy');
    this._register();
  }

  Form.prototype.reset = function() {
    switch (this.action) {
      case 'new':
        if (this.can_pull('new')) {
          return this.Api[this.table_name]["new"](this.attrs());
        }
        break;
      case 'edit':
        if (this.can_pull('edit')) {
          return this.Api[this.table_name].edit(this.param('id'), this.attrs());
        }
        break;
      default:
        if (this.can_pull()) {
          return this.Api[this.table_name][this.action](this.param('id'), this.attrs());
        }
    }
  };

  Form.prototype.submit = function(e) {
    var params;
    $stop(e);
    params = this.params();
    switch (this.action) {
      case 'new':
        this.Api[this.table_name].create(params);
        break;
      case 'edit':
        this.Api[this.table_name].update(this.$.model, params);
        break;
      default:
        this.Api[this.table_name][this.action](this.$.model, params);
    }
    return false;
  };

  Form.prototype._register = function() {
    switch (this.action) {
      case 'edit':
        this.$on(this.table_name + "/edit", this.edit_success);
        this.$on(this.table_name + "/update", this.update_success);
        this.$on(this.table_name + "/update#err", this.create_failure);
        return this.$on(this.table_name + "/destroy", this.destroy_success);
      case 'new':
        this.$on(this.table_name + "/new", this.new_success);
        this.$on(this.table_name + "/create", this.create_success);
        return this.$on(this.table_name + "/create#err", this.create_failure);
      default:
        this.$on(this.table_name + "/" + this.action, this.custom_success);
        this.$on(this.table_name + "/" + this.action + "#success", this.success);
        return this.$on(this.table_name + "/" + this.action + "#err", this.err);
    }
  };

  Form.prototype.new_success = function(e, data) {
    var name;
    this.$.model = data;
    name = this.table_name.singularize();
    return this.$.loading = true;
  };

  Form.prototype.edit_success = function(e, data) {
    var name;
    this.$.model = data;
    name = this.table_name.singularize();
    return this.$.loading = true;
  };

  Form.prototype.create_success = function(e, data) {
    return this.success(data);
  };

  Form.prototype.update_success = function(e, data) {
    return this.success(data);
  };

  Form.prototype.destroy_success = function(e, data) {};

  Form.prototype.success = function(data) {
    return m.route(this.table_name + "/" + data.id);
  };

  Form.prototype.create_failure = function(e, data) {
    return this.$.errors = data;
  };

  Form.prototype.custom_success = function(e, data) {
    return this.$.model = data;
  };

  Form.prototype.can_pull = function(name) {
    if (_.is_array(this.pull)) {
      return _.any(this.pull, function(n) {
        return n === name;
      });
    } else {
      return this.pull;
    }
  };

  Form.prototype.back = function() {
    switch (this.action) {
      case 'new':
        return m.route("/" + this.table_name);
      case 'edit':
        return m.route(this.table_name + "/" + (this.param('id')));
    }
  };

  Form.prototype.destroy = function() {
    var msg, name;
    name = this.table_name.singularize();
    msg = "Are you sure you wish to destroy this " + name;
    if (confirm(msg)) {
      return this.Api[this.table_name].destroy(this.$.model, this.attrs());
    }
  };

  return Form;

})();

module.exports = Form;


},{}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var List,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

List = (function() {
  List.prototype.pull = false;

  List.prototype.popups = false;

  List.prototype.paginate = false;

  List.prototype.search = false;

  List.prototype.controller = null;

  List.prototype.attrs = function() {
    return {};
  };

  function List() {
    this._register = bind(this._register, this);
    this.destroy_success = bind(this.destroy_success, this);
    this.update_success = bind(this.update_success, this);
    this.create_success = bind(this.create_success, this);
    this.index_success = bind(this.index_success, this);
    this.destroy = bind(this.destroy, this);
    this.reindex = bind(this.reindex, this);
    this.update_search = bind(this.update_search, this);
    this._check_model = bind(this._check_model, this);
    this.pop_custom = bind(this.pop_custom, this);
    this.pop_edit = bind(this.pop_edit, this);
    this.pop_show = bind(this.pop_show, this);
    this.pop_new = bind(this.pop_new, this);
    this.attrs = bind(this.attrs, this);
    var dreindex, i, len, name, page, ref, val;
    this.collection = [];
    this.action || (this.action = this._action);
    console.log(this.controller);
    this.controller || (this.controller = this._controller);
    if (!this.table_name) {
      this.table_name = this._action === 'index' ? this._controller : this._action;
    }
    this._register();
    if (typeof this.popups === 'object') {
      this.$.pop = {};
      ref = this.popups;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        switch (name) {
          case 'new':
            this.$.pop["new"] = this.pop_new;
            break;
          case 'edit':
            this.$.pop.edit = this.pop_edit;
            break;
          case 'show':
            this.$.pop.show = this.pop_show;
            break;
          default:
            this.$.pop[name] = this.pop_custom(name);
        }
      }
    } else if (this.popups === true) {
      name = this.collection_name || this.table_name;
      this.$.pop = {
        "new": this.pop_new,
        show: this.pop_show,
        edit: this.pop_edit
      };
    }
    dreindex = debounce(this.reindex, 100);
    if (this.paginate) {
      page = parseInt(this.param('page'));
      this.$.paginate = {
        page: $watch(m.prop(page || 1), dreindex)
      };
    }
    if (this.sortable) {
      val = this.sortable.split(',');
      this.$.sort = {
        name: $watch(m.prop(this.param('sort') || val[0]), dreindex),
        by: $watch(m.prop(this.param('by') || val[1]), dreindex)
      };
    }
    if (this.search) {
      this.$.search = $watch(m.prop(this.param('q') || ''), dreindex);
    }
    if (this.pull) {
      this.reindex();
    }
    if (this.data) {
      this.index_success(null, this.data());
    }
    this.$export('destroy');
    this.$.loading = true;
  }

  List.prototype.pop_new = function() {
    var n;
    n = this.table_name + "_form";
    this._check_model(n);
    this.$[n].model.reset();
    return $broadcast(this.table_name + "/new#pop");
  };

  List.prototype.pop_show = function(model) {
    var n;
    n = this._controller + "_show";
    this._check_model(n);
    this.$[n].model.reset();
    return $broadcast(this.table_name + "/show#pop", {
      model: model
    });
  };

  List.prototype.pop_edit = function(model) {
    var n;
    n = this.table_name + "_form";
    this._check_model(n);
    this.$[n].model.reset();
    return $broadcast(this.table_name + "/edit#pop", {
      model: model
    });
  };

  List.prototype.pop_custom = function(name) {
    return (function(_this) {
      return function(model) {
        var n;
        n = _this._controller + "_" + name;
        _this._check_model(n);
        _this.$[n].model.reset();
        return $broadcast(_this._controller + "/" + name + "#pop", {
          model: model
        });
      };
    })(this);
  };

  List.prototype._check_model = function(name) {
    var ctrl;
    ctrl = this._controller + "/" + this._action;
    if (!this.$[name]) {
      console.log("[List][" + ctrl + "] @$", this.$);
      throw "[List][" + ctrl + "] pop action expects " + name + " to defined on scope";
    }
    if (!this.$[name].model) {
      console.log("[List][" + ctrl + "] @$." + name, this.$[name]);
      throw "[List][" + ctrl + "] pop action expects a model for " + name + " to defined on scope";
    }
  };

  List.prototype.update_search = function(val, old) {
    if (old !== val) {
      if (this.search === 'location') {
        if (val !== '') {
          this.$location.search('search', val);
        } else {
          this.$location.search('search', null);
        }
      }
      if (this.$.paginate) {
        this.$.paginate.page(1);
        this.$location.search('page', null);
      }
      if (this.pull) {
        return this.reindex();
      }
    }
  };

  List.prototype.reindex = function() {
    var attrs;
    attrs = this.attrs();
    if (this.paginate && this.$.paginate && this.$.paginate.page) {
      attrs.page = this.$.paginate.page();
    }
    if (this.search && this.$.search) {
      attrs.search = this.$.search();
    }
    if (this.sortable && this.$.sort) {
      attrs.sort = (this.$.sort.name()) + "," + (this.$.sort.by());
    }
    this.$.loading = true;
    return this.Api[this.controller][this.action](attrs);
  };

  List.prototype.destroy = function(model, opts) {
    var msg, name;
    if (opts == null) {
      opts = {};
    }
    name = this.table_name.singularize();
    msg = "Are you sure you wish to destroy this " + name;
    if (confirm(msg)) {
      this.Api[this.controller].destroy(model, this.attrs());
      if (opts.now) {
        return _.destroy(this.collection, model);
      }
    }
  };

  List.prototype.index_success = function(data) {
    var name;
    this.$.loading = false;
    name = this.collection_name || this.table_name;
    this.$[name] = data;
    return this.collection = this.$[name];
  };

  List.prototype.create_success = function(data) {
    return _.create(this.collection, data);
  };

  List.prototype.update_success = function(data) {
    return _.update(this.collection, data);
  };

  List.prototype.destroy_success = function(data) {
    return _.destroy(this.collection, data);
  };

  List.prototype._register = function() {
    var name, path;
    path = this.controller;
    this.$on(path + "/" + this.action, this.index_success);
    name = this.collection_name || this.table_name;
    path = name;
    this.$on(path + "/create", this.create_success);
    this.$on(path + "/update", this.update_success);
    return this.$on(path + "/destroy", this.destroy_success);
  };

  return List;

})();

module.exports = List;


},{}],16:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var Popup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Popup = (function() {
  Popup.prototype.pull = false;

  Popup.prototype.blank = false;

  Popup.prototype.params = function() {
    var attrs;
    attrs = {};
    attrs[this._controller.singularize()] = this.$.model.params();
    return attrs;
  };

  Popup.prototype.attrs = function() {
    return {};
  };

  function Popup(args) {
    this._register = bind(this._register, this);
    this.can_pull = bind(this.can_pull, this);
    this.error = bind(this.error, this);
    this.success = bind(this.success, this);
    this.custom_success = bind(this.custom_success, this);
    this.edit_success = bind(this.edit_success, this);
    this.submit = bind(this.submit, this);
    this.cancel = bind(this.cancel, this);
    this.pop = bind(this.pop, this);
    this.attrs = bind(this.attrs, this);
    this.params = bind(this.params, this);
    var key, name, ref, val;
    name = this._controller + "_" + this._action;
    this.$.popup_class = name + "_popup";
    if (!args[0][name]) {
      console.log('[Popup] arguments:', args[0]);
      throw "[Popup][" + this._controller + "/" + this._action + "] expected " + name + " for args";
    }
    if (!args[0][name].model) {
      throw "[Popup][" + this._controller + "/" + this._action + "] expects model";
    }
    if (!args[0][name].pop) {
      throw "[Popup][" + this._controller + "/" + this._action + "] expects pop";
    }
    if (!args[0][name].title) {
      throw "[Popup][" + this._controller + "/" + this._action + "] expects title";
    }
    ref = args[0][name];
    for (key in ref) {
      val = ref[key];
      this.$[key] = val;
    }
    this.$.data = null;
    this.$export('submit', 'cancel');
    this._register();
  }

  Popup.prototype.pop = function(data) {
    this.$.pop(true);
    this.$.title((this._action + " " + (this._controller.singularize())).titleize());
    switch (this._action) {
      case 'edit':
        if (this.can_pull('edit')) {
          return this.Api[this._controller].edit(data.model, this.attrs());
        }
        break;
      case 'form':
        if (data && data.model && data.model.id) {
          if (this.can_pull('edit')) {
            this.Api[this._controller].edit(data.model, this.attrs());
          }
          if (this.title && this.title.edit) {
            return this.$.title(this.title.edit());
          } else {
            return this.$.title(("Edit " + (this._controller.singularize())).titleize());
          }
        } else {
          if (this.can_pull('new')) {
            this.Api[this._controller]["new"](this.attrs());
          }
          if (this.title && this.title["new"]) {
            return this.$.title(this.title["new"]());
          } else {
            return this.$.title(("New " + (this._controller.singularize())).titleize());
          }
        }
        break;
      default:
        if (this.can_pull()) {
          return this.Api[this._controller][this._action](data.model, this.attrs());
        }
    }
  };

  Popup.prototype.cancel = function() {
    return this.$.pop(false);
  };

  Popup.prototype.submit = function(e) {
    $stop(e);
    if (this._action !== 'form' && this._action !== 'new' && this._action !== 'edit') {
      this.Api[this._controller][this._action]({
        id: this.$.model.id()
      }, this.params());
    } else if (this.$.model && this.$.model.id()) {
      this.Api[this._controller].update(this.$.model.id(), this.params());
    } else {
      this.Api[this._controller].create(this.params());
    }
    return false;
  };

  Popup.prototype.edit_success = function(data) {
    if (this.$.model) {
      return this.$.model.reset(data);
    }
  };

  Popup.prototype.custom_success = function(data) {
    var k, results, v;
    if (this.$.model) {
      results = [];
      for (k in data) {
        v = data[k];
        if (this.$.model[k]) {
          results.push(this.$.model[k](v));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Popup.prototype.success = function(data) {
    return this.$.pop(false);
  };

  Popup.prototype.error = function(data) {
    return this.$.err = data;
  };

  Popup.prototype.can_pull = function(name) {
    if (_.is_array(this.pull)) {
      return _.any(this.pull, function(n) {
        return n === name;
      });
    } else {
      return this.pull;
    }
  };

  Popup.prototype._register = function() {
    var path;
    if (this._action === 'form') {
      this.$on(this._controller + "/new#pop", this.pop);
      this.$on(this._controller + "/edit#pop", this.pop);
      this.$on(this._controller + "/form#pop", this.pop);
    } else {
      this.$on(this._controller + "/" + this._action + "#pop", this.pop);
    }
    path = this._controller;
    switch (this._action) {
      case 'new':
        this.$on(path + "/new", this.new_success);
        this.$on(path + "/create", this.success);
        this.$on(path + "/create#err", this.err);
        break;
      case 'edit':
        this.$on(path + "/update", this.success);
        this.$on(path + "/destroy", this.success);
        this.$on(path + "/update#err", this.err);
        if (this.can_pull('edit')) {
          this.$on(path + "/edit", this.edit_success);
        }
        break;
      case 'form':
        this.$on(path + "/new", this.new_success);
        this.$on(path + "/create", this.success);
        this.$on(path + "/create#err", this.err);
        this.$on(path + "/update", this.success);
        this.$on(path + "/destroy", this.success);
        this.$on(path + "/update#err", this.err);
        this.$on(path + "/edit", this.edit_success);
        break;
      default:
        this.$on(path + "/" + this._action, this.success);
        this.$on(path + "/" + this._action + "#err", this.err);
        this.$on(path + "/update", this.success);
        this.$on(path + "/update#err", this.err);
    }
    return true;
  };

  return Popup;

})();

module.exports = Popup;


},{}],17:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var Show,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Show = (function() {
  Show.prototype.pull = false;

  Show.prototype.popups = false;

  Show.prototype.action = 'show';

  Show.prototype.collection_name = null;

  Show.prototype.attrs = function() {
    return {};
  };

  function Show() {
    this.destroy = bind(this.destroy, this);
    this._prefix = bind(this._prefix, this);
    this.reindex = bind(this.reindex, this);
    this.destroy_success = bind(this.destroy_success, this);
    this.update_success = bind(this.update_success, this);
    this.show_success = bind(this.show_success, this);
    this._register = bind(this._register, this);
    this.pop_custom = bind(this.pop_custom, this);
    this.pop_edit = bind(this.pop_edit, this);
    this.attrs = bind(this.attrs, this);
    var i, len, name, ref;
    if (!this.table_name) {
      this.table_name = this._controller;
    }
    this._register();
    if (this.pull) {
      this.reindex();
    }
    if (typeof this.popups === 'object') {
      this.$.pop = {};
      ref = this.popups;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        this.$.pop[name] = this.pop_custom(name);
      }
    } else if (this.popups === true) {
      name = this.collection_name || this.table_name;
      this.$.pop = {
        edit: this.pop_edit
      };
    }
    this.$.destroy = this.destroy;
  }

  Show.prototype.pop_edit = function(model) {
    this.$[this.table_name + "_form"].model.reset({
      id: this.param('id')
    });
    return $broadcast(this.table_name + "/edit#pop", {
      model: model
    });
  };

  Show.prototype.pop_custom = function(name) {
    return (function(_this) {
      return function(model) {
        _this.$[_this.table_name + "_" + name].model.reset({
          id: _this.param('id')
        });
        return $broadcast(_this.table_name + "/" + name + "#pop", {
          model: model
        });
      };
    })(this);
  };

  Show.prototype._register = function() {
    var path;
    path = this.table_name;
    this.$on(path + "/show", this.show_success);
    this.$on(path + "/update", this.update_success);
    return this.$on(path + "/destroy", this.destroy_success);
  };

  Show.prototype.show_success = function(data) {
    return this.$.model = data;
  };

  Show.prototype.update_success = function(data) {
    return this.$.model = data;
  };

  Show.prototype.destroy_success = function() {};

  Show.prototype.reindex = function() {
    var attrs;
    attrs = this.attrs();
    return this.Api[this.table_name][this.action]({
      id: this.param('id')
    }, attrs);
  };

  Show.prototype._prefix = function() {
    var path;
    path = _.map(this.scope, (function(_this) {
      return function(s) {
        return (_.pluralize(s)) + "/" + _this.$[s].id;
      };
    })(this));
    return path.join('/');
  };

  Show.prototype.destroy = function(model) {
    var msg, name;
    name = _.singularize(this.table_name);
    msg = "Are you sure you wish to destroy this " + name;
    if (confirm(msg)) {
      return this.Api[this.table_name].destroy(model, this.attrs());
    }
  };

  return Show;

})();

module.exports = Show;


},{}],18:[function(require,module,exports){
'use strict';

var window = window || {};

//Require external deps
var _ = window._ = require("underscore");
var m = window.m = require("mithril");

var $monster = {core: {}, helpers: {}};

var app = $monster.$app = require("./monster.coffee");

$monster.core.ApiBase = require("./core/api.coffee");

$monster.helpers.Popup = require("./helpers/popup.coffee");
$monster.helpers.Show = require("./helpers/show.coffee");
$monster.helpers.List = require("./helpers/list.coffee");
$monster.helpers.Form = require("./helpers/form.coffee");

$monster.$mixin = require("./core/mixin.coffee");
$monster.$location = require("./core/location.coffee");
$monster.$controller = require("./core/controller.coffee");
$monster.$layout = require("./core/layout.coffee");
$monster.$model = require("./core/model.coffee");
$monster.$popup = require("./core/popup.coffee");
$monster.$service = require("./core/service.coffee");
$monster.$view = require("./core/view.coffee");

_.extend($monster, require("./core/comp.coffee"));
_.extend($monster, require("./core/dom.coffee"));
_.extend($monster, require("./core/events.coffee"));
_.extend($monster, require("./core/filter.coffee"));

//Add all internal $monster keys to the global scope within this library so that internal
//components can reference things within the monster-mithril library without the namespace.
_.extend(this, $monster);

$monster._ = _;
$monster.m = m;

window.$monster = $monster;
module.exports = $monster;
},{"./core/api.coffee":1,"./core/comp.coffee":2,"./core/controller.coffee":3,"./core/dom.coffee":4,"./core/events.coffee":5,"./core/filter.coffee":6,"./core/layout.coffee":7,"./core/location.coffee":8,"./core/mixin.coffee":9,"./core/model.coffee":10,"./core/popup.coffee":11,"./core/service.coffee":12,"./core/view.coffee":13,"./helpers/form.coffee":14,"./helpers/list.coffee":15,"./helpers/popup.coffee":16,"./helpers/show.coffee":17,"./monster.coffee":19,"mithril":"mithril","underscore":"underscore"}],19:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $$, api_loaded, app;

if (typeof _isomorphic !== 'undefined') {
  m.route = {
    param: function(key) {
      return _iso_param[key];
    }
  };
}

api_loaded = false;

$$ = {};

app = {
  events: {},
  models: {},
  services: {},
  util: {},
  store: {},
  preload: {},
  mixins: {}
};

window.$$ = {};

window.app = app;

window.api_loaded = api_loaded;

module.exports = app;


},{}],"mithril":[function(require,module,exports){
/*
Mithril v0.2.1
http://mithril.js.org
(c) 2014-2015 Leo Horie
License: MIT
*/
!function(a,b){"use strict";var c=b("undefined"!=typeof window?window:{});"object"==typeof module&&null!=module&&module.exports?module.exports=c:"function"==typeof define&&define.amd?define(function(){return c}):a.m=c}(this,function(a,b){"use strict";function c(a){return"function"==typeof a}function d(a){return"[object Object]"===bc.call(a)}function e(a){return"[object String]"===bc.call(a)}function f(){}function g(a,b){for(var c=0;c<a.length;c++)b(a[c],c)}function h(a,b){for(var c in a)cc.call(a,c)&&b(a[c],c)}function i(a){Zb=a.document,$b=a.location,ac=a.cancelAnimationFrame||a.clearTimeout,_b=a.requestAnimationFrame||a.setTimeout}function j(a){function b(){return arguments.length&&(a=arguments[0]),a}return b.toJSON=function(){return a},b}function k(a){return null!=a&&(d(a)||c(a))&&c(a.then)}function l(a,b){return a.then?a.then(b):b()}function m(a){var b=r.prop();return a.then(b),b.then=function(c,d){return a.then(function(){return c(b())},d)},b.catch=function(c){return a.then(function(){return b()},c)},b.finally=function(b){return a.then(function(a){return l(b(),function(){return a})},function(a){return l(b(),function(){throw a})})},b}function n(a){return null!=a&&d(a)&&!("tag"in a||"view"in a||"subtree"in a)}function o(a,b){for(var c,d=[],e=/(?:(^|#|\.)([^#\.\[\]]+))|(\[.+?\])/g;null!=(c=e.exec(a));)if(""===c[1]&&null!=c[2])b.tag=c[2];else if("#"===c[1])b.attrs.id=c[2];else if("."===c[1])d.push(c[2]);else if("["===c[3][0]){var f=/\[(.+?)(?:=("|'|)(.*?)\2)?\]/.exec(c[3]);b.attrs[f[1]]=f[3]||(f[2]?"":!0)}return d}function p(a,b,c,d){var e=!1;if(cc.call(b,c)){var f=b[c];null!=f&&""!==f&&(e=!0,d.push(f))}h(b,function(b,d){a[d]=d===c&&e?"":b}),d.length&&(a[c]=d.join(" "))}function q(a){function b(){return g.apply(this,d)||this}function c(b){for(var c=[b].concat(d),e=1;e<arguments.length;e++)c.push(arguments[e]);return h.apply(a,c)}for(var d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);var g=a.controller||f;g!==f&&(b.prototype=g.prototype);var h=a.view||f;c.$original=h;var i={controller:b,view:c};return d[0]&&null!=d[0].key&&(i.attrs={key:d[0].key}),i}function r(a,b){if(d(a))return q.apply(null,arguments);if(!e(a))throw new TypeError("selector in m(selector, attrs, children) should be a string");if(!a)throw new TypeError("selector cannot be an empty string");for(var c=n(b),f=[],g=c?2:1;g<arguments.length;g++)f.push(arguments[g]);var h;h=1===f.length&&dc(f[0])?f[0]:f;var i={tag:"div",attrs:{},children:h};return p(i.attrs,c?b:{},c&&"class"in b?"class":"className",o(a,i)),i}function s(a,b){for(var c=0;c<a.length;c++){var d=a[c];if(d=d&&d.attrs,d&&null!=d.key&&b(d,c))break}}function t(a){try{if(null!=a&&null!=a.toString())return a}catch(b){}return""}function u(a){for(var b=0;b<a.length;b++)dc(a[b])&&(a=a.concat.apply([],a),b--);return a}function v(a,b,c){a.insertBefore(b,a.childNodes[c]||null)}function w(a,b,c,d,e,f,g,h,i,j,k){return{parent:a,pTag:b,pCache:c,pIndex:d,data:e,cached:f,reattach:g,index:h,editable:i,ns:j,cfgs:k}}function x(a){return a.data=t(a.data),"retain"===a.data.subtree?a.cached:(y(a),dc(a.data)?B(a):null!=a.data&&d(a.data)?H(a):c(a.data)?a.cached:_(a))}function y(a){if(null!=a.cached){if(bc.call(a.cached)===bc.call(a.data))return;if(a.pCache&&a.pCache.nodes){var b=a.index-a.pIndex,c=b+(dc(a.data)?a.data:a.cached.nodes).length;nb(a.pCache.nodes.slice(b,c),a.pCache.slice(b,c))}else a.cached.nodes&&nb(a.cached.nodes,a.cached)}a.cached=new a.data.constructor,a.cached.tag&&(a.cached={}),a.cached.nodes=[]}function z(a){var b=0;s(a,function(){return g(a,function(a){a=a&&a.attrs,a&&null==a.key&&(a.key="__mithril__"+b++)}),!0})}function A(a,b,c,d){return x(w(a.parent,a.pTag,a.cached,a.index,b,c,a.reattach,a.index+d||d,a.editable,a.ns,a.cfgs))}function B(a){a.data=u(a.data);var c=[],d=a.cached.length===a.data.length,e=0,f={},g=!1;s(a.cached,function(a,b){g=!0,f[a.key]={action:ec,index:b}}),z(a.data),g&&C(a,f);for(var h=0,i=0,j=a.data.length;j>i;i++){var k=A(a,a.data[i],a.cached[h],e);k!==b&&(d=d&&k.nodes.intact,e+=gb(k),a.cached[h++]=k)}return d||E(a,c),a.cached}function C(a,b){var c=a.data.length!==a.cached.length;c||s(a.data,function(b,d){var e=a.cached[d];return c=e&&e.attrs&&e.attrs.key!==b.key}),c&&D(a,b)}function D(a,b){var c=a.cached.nodes;s(a.data,function(a,d){a=a.key,b[a]=b[a]?{action:gc,index:d,from:b[a].index,element:c[b[a].index]||Zb.createElement("div")}:{action:fc,index:d}});var d=[];h(b,function(a){d.push(a)});var e=d.sort(hb),f=new Array(a.cached.length);f.nodes=a.cached.nodes.slice(),g(e,function(b){var c=b.index;switch(b.action){case ec:nb(a.cached[c].nodes,a.cached[c]),f.splice(c,1);break;case fc:var d=Zb.createElement("div");d.key=a.data[c].attrs.key,v(a.parent,d,c),f.splice(c,0,{attrs:{key:a.data[c].attrs.key},nodes:[d]}),f.nodes[c]=d;break;case gc:var e=b.element;a.parent.childNodes[c]!==e&&a.parent.insertBefore(e,a.parent.childNodes[c]||null),f[c]=a.cached[b.from],f.nodes[c]=e}}),a.cached=f}function E(a,b){for(var c=0,d=a.data.length;d>c;c++){var e=a.cached[c];null!=e&&b.push.apply(b,e.nodes)}g(a.cached.nodes,function(c,d){null!=c.parentNode&&b.indexOf(c)<0&&nb([c],[a.cached[d]])}),a.data.length<a.cached.length&&(a.cached.length=a.data.length),a.cached.nodes=b}function F(a){var b=a.data.attrs=a.data.attrs||{};a.cached.attrs=a.cached.attrs||{};var c=Object.keys(a.data.attrs);return N(a,c),c.length>+("key"in b)}function G(a){var b=a.data;return b.attrs.xmlns?b.attrs.xmlns:"svg"===b.tag?"http://www.w3.org/2000/svg":"math"===b.tag?"http://www.w3.org/1998/Math/MathML":a.ns}function H(a){var b=[],c=[];if(I(a,b,c),!a.data.tag&&c.length)throw new Error("Component template must return a virtual element, not an array, string, etc.");var d=F(a);return e(a.data.tag)?R({builder:a,hasKeys:d,views:b,controllers:c,ns:G(a)}):void 0}function I(a,b,c){for(var d=a.cached&&a.cached.controllers;null!=a.data.view;)J(a,d,c,b)}function J(a,b,c,d){var e=a.data.view.$original||a.data.view,f=M(a.cached.views,e,b,a.data.controller),g=+(a.data&&a.data.attrs&&a.data.attrs.key);return a.data=0===ic||hc||b&&b.indexOf(f)>-1?a.data.view(f):{tag:"placeholder"},"retain"===a.data.subtree?a.cached:(g===g&&((a.data.attrs=a.data.attrs||{}).key=g),void L(d,c,e,f))}function K(a,b){a.ctrls.splice(a.ctrls.indexOf(a.ctrl),1),a.views.splice(a.views.indexOf(a.view),1),a.ctrl&&c(a.ctrl.onunload)&&a.ctrl.onunload(b)}function L(a,b,c,d){a.push(c),jc[b.push(d)-1]={views:a,view:c,ctrl:d,ctrls:b}}function M(a,b,d,e){var f="diff"===lc()&&a?a.indexOf(b):-1;return f>-1?d[f]:c(e)?new e:{}}function N(a,b){P(a,b)&&(a.cached.nodes.length&&nb(a.cached.nodes),a.cached.cfgCtx&&c(a.cached.cfgCtx.onunload)&&a.cached.cfgCtx.onunload(),a.cached.controllers&&g(a.cached.controllers,function(a){a.unload&&a.onunload({preventDefault:f})}))}function O(a,c){var d=a.length;if(d!==c.length)return!1;for(var e=0,f=Object.create(null);d>e;)f[c[e]]=e++;for(;0!==e;)if(f[a[--e]]===b)return!1;return!0}function P(a,b){var c=a.data,d=a.cached;return c.tag!==d.tag?!0:O(b,Object.keys(d.attrs))?c.attrs.id!==d.attrs.id?!0:c.attrs.key!==d.attrs.key?!0:"all"===lc()?!d.cfgCtx||d.cfgCtx.retain!==!0:"diff"===lc()?d.cfgCtx&&d.cfgCtx.retain===!1:!1:!0}function Q(a){var b=S(a);return a.builder.cached=W(a,b,T(a,b),V(a,b)),b}function R(a){var b=a.builder,c=0===b.cached.nodes.length,d=c?Q(a):Z(a);return(c||b.reattach&&null!=d)&&v(b.parent,d,b.index),$(b,d,c),b.cached}function S(a){var c=a.builder.data;return a.ns===b?c.attrs.is?Zb.createElement(c.tag,c.attrs.is):Zb.createElement(c.tag):c.attrs.is?Zb.createElementNS(a.ns,c.tag,c.attrs.is):Zb.createElementNS(a.ns,c.tag)}function T(a,b){var c=a.builder.data;return a.hasKeys?lb(b,c.tag,c.attrs,{},a.ns):c.attrs}function U(a,c,d){var e=a.builder;return x(w(c,e.data.tag,b,b,e.data.children,e.cached.children,d,0,e.data.attrs.contenteditable?c:e.editable,a.ns,e.cfgs))}function V(a,b){var c=a.builder.data.children;return null!=c&&c.length?U(a,b,!0):c}function W(a,b,c,d){var e=a.builder.data,f={tag:e.tag,attrs:c,children:d,nodes:[b]};return Y(a,f),f.children&&!f.children.nodes&&(f.children.nodes=[]),"select"===e.tag&&"value"in e.attrs&&lb(b,e.tag,{value:e.attrs.value},{},a.ns),f}function X(a){if(a.onunload&&a.onunload.$old&&(a.onunload=a.onunload.$old),ic&&a.onunload){var b=a.onunload;a.onunload=f,a.onunload.$old=b}}function Y(a,b){a.controllers.length&&(b.views=a.views,b.controllers=a.controllers,g(a.controllers,X))}function Z(a){var b=a.builder.cached,c=b.nodes[0];return a.hasKeys&&lb(c,a.builder.data.tag,a.builder.data.attrs,b.attrs,a.ns),b.children=U(a,c,!1),b.nodes.intact=!0,a.controllers.length&&(b.views=a.views,b.controllers=a.controllers),c}function $(a,b,d){var e=a.data,f=a.cached,g=e.attrs.config;if(c(g)){var h=f.cfgCtx=f.cfgCtx||{};a.cfgs.push(function(){return g.call(e,b,!d,h,f)})}}function _(a){return 0===a.cached.nodes.length?bb(a):a.cached.valueOf()!==a.data.valueOf()||a.reattach?cb(a):(a.cached.nodes.intact=!0,a.cached)}function ab(a){return!/^(AREA|BASE|BR|COL|COMMAND|EMBED|HR|IMG|INPUT|KEYGEN|LINK|META|PARAM|SOURCE|TRACK|WBR)$/.test(a)}function bb(a){var b;a.data.$trusted?b=pb(a.parent,a.index,a.data):(b=[Zb.createTextNode(a.data)],ab(a.parent.nodeName)&&v(a.parent,b[0],a.index));var c;return c="string"==typeof a.data||"number"==typeof a.data||"boolean"==typeof a.data?new a.data.constructor(a.data):a.data,c.nodes=b,c}function cb(a){var b=a.cached.nodes;return a.editable&&a.editable===Zb.activeElement||(a.data.$trusted?(nb(b,a.cached),b=pb(a.parent,a.index,a.data)):"textarea"===a.pTag?a.parent.value=a.data:a.editable?a.editable.innerHTML=a.data:((1===b[0].nodeType||b.length>1||b[0].nodeValue.trim&&!b[0].nodeValue.trim())&&(nb(a.cached.nodes,a.cached),b=[Zb.createTextNode(a.data)]),db(a,b[0]))),a.cached=new a.data.constructor(a.data),a.cached.nodes=b,a.cached}function db(a,b){try{v(a.parent,b,a.index),b.nodeValue=a.data}catch(c){}}function eb(){ic++}function fb(){ic>1?ic--:(ic=0,r.redraw())}function gb(a){if(!a.$trusted)return dc(a)?a.length:1;var b=a.match(/<[^\/]|\>\s*[^<]/g);return null!=b?b.length:void 0}function hb(a,b){return a.action-b.action||a.index-b.index}function ib(a){return!/^(list|style|form|type|width|height)$/.test(a)}function jb(a,b,e,f,g,i){if("config"!==a&&"key"!==a)if(c(b)&&"on"===a.slice(0,2))f[a]=qb(b,f);else if("style"===a&&null!=b&&d(b)){h(b,function(a,b){(null==e||e[b]!==a)&&(f.style[b]=a)});for(var j in e)cc.call(e,j)&&(cc.call(b,j)||(f.style[j]=""))}else null!=g?"href"===a?f.setAttributeNS("http://www.w3.org/1999/xlink","href",b):f.setAttribute("className"===a?"class":a,b):a in f&&ib(a)?("input"!==i||f[a]!==b)&&(f[a]=b):f.setAttribute(a,b)}function kb(a,b,c,d,e,f){try{jb(a,b,c,d,e,f)}catch(g){if(/\bInvalid argument\b/.test(g.message))throw g}}function lb(a,b,c,d,e){return h(c,function(c,f){var g=d[f];f in d&&g===c?"value"===f&&"input"===b&&a.value!=c&&(a.value=c):(d[f]=c,kb(f,c,g,a,e,b))}),d}function mb(a){try{a.parentNode.removeChild(a)}catch(b){}}function nb(a,b){if(a.length){b=[].concat(b);for(var c=a.length-1;c>=0;c--){var d=a[c];null!=d&&d.parentNode&&(mb(d),b[c]&&ob(b[c]))}a.length&&(a.length=0)}}function ob(a){a.cfgCtx&&c(a.cfgCtx.onunload)&&(a.cfgCtx.onunload(),a.cfgCtx.onunload=null),a.controllers&&g(a.controllers,function(a){c(a.onunload)&&a.onunload({preventDefault:f})}),a.children&&(dc(a.children)?g(a.children,ob):a.children.tag&&ob(a.children))}function pb(a,b,c){var d=a.childNodes[b];if(d)if(1!==d.nodeType){var e=Zb.createElement("span");a.insertBefore(e,d||null),e.insertAdjacentHTML("beforebegin",c),a.removeChild(e)}else d.insertAdjacentHTML("beforebegin",c);else mc(a,c);for(var f=[];a.childNodes[b]!==d;)f.push(a.childNodes[b++]);return f}function qb(a,b){return function(c){lc("diff"),eb();try{return a.call(b,c||event)}finally{zb()}}}function rb(a){var b=oc.indexOf(a);return 0>b?oc.push(a)-1:b}function sb(a,b,c,d){var e=null===a;if(!d){lc("all"),eb(),rc[c]=b,a=qc=a||{controller:f};var g=new(a.controller||f);return a===qc&&(tc[c]=g,sc[c]=a),zb(),e&&ub(b,c),tc[c]}e&&ub(b,c)}function tb(a,b){if(!a)throw new Error("Please ensure the DOM element exists before rendering a template into it.");var d=rc.indexOf(a);0>d&&(d=rc.length);var e=!1,f={preventDefault:function(){e=!0,uc=vc=null}};return g(jc,function(a){null!=a.ctrl&&(K(a,f),a.ctrl.onunload=null)}),e?g(jc,function(a){a.ctrl.onunload=function(b){K(a,b)}}):jc=[],tc[d]&&c(tc[d].onunload)&&tc[d].onunload(f),sb(b,a,d,e)}function ub(a,b){rc.splice(b,1),tc.splice(b,1),sc.splice(b,1),Ob(a),oc.splice(rb(a),1)}function vb(){0!==xc&&ac(xc),xc=_b(yb,wc)}function wb(){xc=0}function xb(a){xc&&!a?zc():(yb(),xc=_b(wb,wc))}function yb(){uc&&(uc(),uc=null);for(var a=0;a<rc.length;a++){var b=rc[a],c=sc[a],d=tc[a];null!=d&&r.render(b,c.view?c.view(d,[d]):"")}vc&&(vc(),vc=null),xc=null,yc=new Date,lc("diff")}function zb(){"none"===lc()?(ic--,lc("diff")):fb()}function Ab(){var a=$b[Hb.mode];"pathname"===Hb.mode&&(a+=$b.search),Bc!==Ib(a)&&Dc(a)}function Bb(b){a[b]=Ab,uc=Lb,a[b]()}function Cb(){return("pathname"===Hb.mode?"":$b.pathname)+Cc[Hb.mode]}function Db(){a.history.pushState(null,Zb.title,Cc[Hb.mode]+Bc)}function Eb(){a.history.replaceState(null,Zb.title,Cc[Hb.mode]+Bc)}function Fb(b){a.history.pushState?(uc=Lb,vc=b?Eb:Db,Dc(Cc[Hb.mode]+Bc)):($b[Hb.mode]=Bc,Dc(Cc[Hb.mode]+Bc))}function Gb(a,b,c){arguments.length<3&&"object"!=typeof b&&(c=b,b=null);var d=Bc;Bc=a;var e,f,g=b||{},i=Bc.indexOf("?");if(i>=0){var j=Nb(Bc.slice(i+1));h(g,function(a,b){j[b]=g[b]}),e=Mb(j),f=Bc.slice(0,i)}else e=Mb(b),f=Bc;if(e){var k=-1===f.indexOf("?")?"?":"&";Bc=f+k+e}return Fb(c||d===a)}function Hb(a,b,c,d){if(0===arguments.length)return Bc;if(3===arguments.length&&e(b))Dc=function(d){var e=Bc=Ib(d);if(!Jb(a,c,e)){if(Ec)throw new Error("Ensure the default route matches one of the routes defined in m.route");Ec=!0,Hb(b,!0),Ec=!1}},Bb("hash"===Hb.mode?"onhashchange":"onpopstate");else if(a.addEventListener||a.attachEvent)a.href=Cb()+d.attrs.href,a.addEventListener?(a.removeEventListener("click",Kb),a.addEventListener("click",Kb)):(a.detachEvent("onclick",Kb),a.attachEvent("onclick",Kb));else if(e(a))return Gb.apply(null,arguments)}function Ib(a){return a.slice(Cc[Hb.mode].length)}function Jb(a,b,c){var d=c.indexOf("?");d>=0?(Ac=Nb(c.substr(d+1,c.length)),c=c.substr(0,d)):Ac={};var e=Object.keys(b),f=e.indexOf(c);if(f>=0)return tb(a,b[e[f]]),!0;for(var h in b)if(cc.call(b,h)){if(h===c)return tb(a,b[h]),!0;var i=new RegExp("^"+h.replace(/:[^\/]+?\.{3}/g,"(.*?)").replace(/:[^\/]+/g,"([^\\/]+)")+"/?$");if(i.test(c))return c.replace(i,function(){for(var a=[],b=1,c=arguments.length-2;c>b;)a.push(arguments[b++]);var d=h.match(/:[^\/]+/g)||[];g(d,function(b,c){b=b.replace(/:|\./g,""),Ac[b]=decodeURIComponent(a[c])})}),tb(a,b[h]),!0}}function Kb(a){if(a=a||event,!a.ctrlKey&&!a.metaKey&&2!==a.which){a.preventDefault?a.preventDefault():a.returnValue=!1;var b,c=a.currentTarget||a.srcElement;for(b="pathname"===Hb.mode&&c.search?Nb(c.search.slice(1)):{};c&&"A"!==c.nodeName.toUpperCase();)c=c.parentNode;ic=0,Hb(c[Hb.mode].slice(Cc[Hb.mode].length),b)}}function Lb(){"hash"!==Hb.mode&&$b.hash?$b.hash=$b.hash:a.scrollTo(0,0)}function Mb(a,c){var e={},f=[];return h(a,function(a,h){var i=c?c+"["+h+"]":h;if(null===a)f.push(encodeURIComponent(i));else if(d(a))f.push(Mb(a,i));else if(dc(a)){var j=[];e[i]=e[i]||{},g(a,function(a){e[i][a]||(e[i][a]=!0,j.push(encodeURIComponent(i)+"="+encodeURIComponent(a)))}),f.push(j.join("&"))}else a!==b&&f.push(encodeURIComponent(i)+"="+encodeURIComponent(a))}),f.join("&")}function Nb(a){if(!a)return{};"?"===a[0]&&(a=a.slice(1));var b=a.split("&"),c={};return g(b,function(a){var b=a.split("="),d=decodeURIComponent(b[0]),e=2===b.length?decodeURIComponent(b[1]):null;null!=c[d]?(dc(c[d])||(c[d]=[c[d]]),c[d].push(e)):c[d]=e}),c}function Ob(a){var c=rb(a);nb(a.childNodes,pc[c]),pc[c]=b}function Pb(a,b,c){return k(a)?a.then(function(a){Pb(a,b,c)},function(a){Pb(a,c,c)}):b(a)}function Qb(a,d){function e(a){r=a}function f(a){a.resolve(r)}function h(a){a.reject(r)}function i(a){return u!==h&&a(r),a}function j(a){t.push(a)}function l(a,b){var c=Rb().resolve(a()).promise;return b!==h&&c(r),c.then(b)}function m(a){u=a,g(t,a),n=q=null}function n(a,b){Pb(a,function(a){r=a,m(b===Hc?f:h)},function(a){r=a,m(h)})}function o(a,b){var c=0;try{return a.then(function(a){c++||q(Fc,a,b)},function(a){c++||q(Gc,a,b)})}catch(d){return Rb.onerror(d),q(Gc,d,b)}}function p(b,e,f){try{e===Fc&&c(a)?b=a(b):e===Gc&&c(d)&&(b=d(b),e=Fc)}catch(g){return Rb.onerror(g),n(g,Ic)}return b===f?n(TypeError(),Ic):n(b,e===Fc?Hc:Ic)}function q(a,b,c){var d;try{d=k(b)}catch(e){return Rb.onerror(e),q(Gc,e,c)}return a===Gc&&Rb.onerror(b),d?o(b,c):p(b,a,c)}var r,s=this,t=[],u=j;s.resolve=function(a){return u===j&&q(Fc,a,s),s},s.reject=function(a){return u===j&&q(Gc,a,s),s},s.promise=function(a){return arguments.length&&Pb(a,e,e),u!==h?r:b},s.promise.then=function(a,b){var c=new Qb(a,b);return u(c),i(c.promise)},s.promise.catch=function(a){return s.promise.then(null,a)},s.promise.finally=function(a){return s.promise.then(function(){return l(a,function(){return r})},function(){return l(a,function(){throw r})})}}function Rb(){return new Qb}function Sb(a){return a instanceof EvalError||a instanceof RangeError||a instanceof ReferenceError||a instanceof SyntaxError||a instanceof TypeError||a instanceof URIError}function Tb(){return"mithril_callback_"+(new Date).getTime()+"_"+Math.round(1e16*Math.random()).toString(36)}function Ub(c){var d=Tb(),e=Zb.createElement("script");a[d]=function(f){e.parentNode.removeChild(e),c.onload({success:!0,target:{responseText:f}}),a[d]=b},e.onerror=function(){return e.parentNode.removeChild(e),c.onerror({success:!1,target:{status:500,responseText:'{"error": "Error making jsonp request"}'}}),a[d]=b,!1},e.onload=function(){return!1},e.src=c.url+(c.url.indexOf("?")>0?"&":"?")+(c.callbackKey||"callback")+"="+d+"&"+Mb(c.data||{}),Zb.body.appendChild(e)}function Vb(b){var d=new a.XMLHttpRequest;if(d.open(b.method,b.url,!0,b.user,b.password),d.onreadystatechange=function(){4===this.readyState&&(this.status>=200&&this.status<300?b.onload({success:!0,target:this}):b.onerror({success:!1,target:this}))},b.serialize===JSON.stringify&&b.data&&"GET"!==b.method&&d.setRequestHeader("Content-Type","application/json; charset=utf-8"),b.deserialize===JSON.parse&&d.setRequestHeader("Accept","application/json, text/*"),c(b.config)){var f=b.config(d,b);null!=f&&(d=f)}var g;if(g="GET"!==b.method&&b.data?b.data:"",g&&!e(g)&&!(g instanceof a.FormData))throw new Error("Request data should be either be a string or FormData. Check the `serialize` option in `m.request`");return d.send(g),d}function Wb(a){return a.dataType&&"JSONP"===a.dataType.toUpperCase()?Ub(a):Vb(a)}function Xb(a,b,c){if("GET"===a.method&&"jsonp"!==a.dataType){var d=a.url.indexOf("?")<0?"?":"&",e=Mb(b);a.url+=e?d+e:""}else a.data=c(b);return a}function Yb(a,b){var c=a.match(/:[a-z]\w+/gi);return c&&b&&g(c,function(c){var d=c.slice(1);a=a.replace(c,b[d]),delete b[d]}),a}r.version=function(){return"v0.2.1"};var Zb,$b,_b,ac,bc={}.toString,cc={}.hasOwnProperty,dc=Array.isArray||function(a){return"[object Array]"===bc.call(a)};i(a),r.deps=function(b){return i(a=b||a),a},r.prop=function(a){return k(a)?m(a):j(a)},r.component=q;var ec=1,fc=2,gc=3,hc=!1,ic=0,jc=[],kc=!1;r.redraw=function(a){if(!kc){kc=!0,a&&(hc=!0);try{xb(a)}finally{kc=hc=!1}}};var lc=r.redraw.strategy=r.prop();r.startComputation=eb,r.endComputation=fb;var mc=function(){try{return Zb.createRange().createContextualFragment("x"),function(a,b){a.appendChild(Zb.createRange().createContextualFragment(b))}}catch(a){return function(a,b){a.insertAdjacentHTML("beforeend",b)}}}(),nc={appendChild:function(a){Zb.documentElement&&Zb.documentElement!==a?Zb.replaceChild(a,Zb.documentElement):Zb.appendChild(a),this.childNodes=Zb.childNodes},insertBefore:function(a){this.appendChild(a)},childNodes:[]},oc=[],pc={};r.render=function(a,c,d){if(!a)throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render exists.");var e,f=[],h=rb(a),i=a===Zb;e=i||a===Zb.documentElement?nc:a,i&&"html"!==c.tag&&(c={tag:"html",attrs:{},children:c}),pc[h]===b&&nb(e.childNodes),d===!0&&Ob(a),pc[h]=x(w(e,null,b,b,c,pc[h],!1,0,null,b,f)),g(f,function(a){a()})},r.trust=function(a){return a=new String(a),a.$trusted=!0,a};var qc,rc=[],sc=[],tc=[],uc=null,vc=null,wc=16;r.mount=r.module=tb;var xc=0,yc=0,zc=_b===a.requestAnimationFrame?vb:function(){+new Date-yc>wc&&vb()};r.withAttr=function(a,b,c){return function(d){d=d||event;var e,f=d.currentTarget||this;e=a in f?f[a]:f.getAttribute(a),b.call(c||this,e)}};var Ac,Bc,Cc={pathname:"",hash:"#",search:"?"},Dc=f,Ec=!1;r.route=Hb,Hb.param=function(a){if(!Ac)throw new Error("You must call m.route(element, defaultRoute, routes) before calling mroute.param()");return a?Ac[a]:Ac},Hb.mode="search",Hb.buildQueryString=Mb,Hb.parseQueryString=Nb;var Fc=1,Gc=2,Hc=3,Ic=4;return r.deferred=Rb,Rb.prototype=Qb.prototype,Rb.prototype.constructor=Rb,Rb.onerror=function(a){if(Sb(a))throw ic=0,a},r.sync=function(a){function b(a,b){return e[a]=b,0===--d&&(c.promise(e),c[f](e)),b}var c=new Qb,d=a.length,e=new Array(d),f="resolve";return a.length>0?g(a,function(a,c){a.then(function(a){return b(c,a)},function(a){return f="reject",b(c,a)})}):c.resolve([]),c.promise},r.request=function(a){a.background!==!0&&eb();var b=Rb(),c=function(a){return a},d=c,e=function(a){return a.responseText};return a.dataType&&"JSONP"===a.dataType.toUpperCase()||(c=a.serialize||JSON.stringify,d=a.deserialize||JSON.parse,e=a.extract||function(a){return a.responseText.length||d!==JSON.parse?a.responseText:null}),a.serialize=c,a.deserialize=d,a.method=(a.method||"GET").toUpperCase(),a.url=Yb(a.url,a.data),a=Xb(a,a.data,c),a.onload=a.onerror=function(c){c=c||event;var f,h=c.success;f=h?a.unwrapSuccess:a.unwrapError;try{var i=d(e(c.target,a));f&&(i=f(i,c.target)),h?(dc(i)&&a.type?g(i,function(b,c){i[c]=new a.type(b)}):a.type&&(i=new a.type(i)),b.resolve(i)):b.reject(i)}catch(j){b.reject(j)}finally{a.background!==!0&&fb()}},Wb(a),b.promise(a.initialValue),b.promise},r});

},{}],"underscore":[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}]},{},[18])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
