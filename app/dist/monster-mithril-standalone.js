(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var window = window || {};

//Require external deps
var _ = window._ = require("underscore");
var m = window.m = require("mithril");

var $monster = {core: {}, helpers: {}};

var app = $monster.$app = require("monster.coffee");

$monster.core.ApiBase = require("core/api.coffee");
$monster.helpers.Popup = require("helpers/popup.coffee");

$monster.$comp = require("core/comp.coffee");
$monster.$controller = require("core/controller.coffee");
$monster.$layout = require("core/layout.coffee");
$monster.$model = require("core/model.coffee");
$monster.$popup = require("core/popup.coffee");
$monster.$service = require("core/service.coffee");
$monster.$view = require("core/view.coffee");

_.extend($monster, require("core/dom.coffee"));
_.extend($monster, require("core/events.coffee"));
_.extend($monster, require("core/filter.coffee"));

$monster._ = _;
$monster.m = m;

module.exports = $monster;
},{"core/api.coffee":2,"core/comp.coffee":3,"core/controller.coffee":4,"core/dom.coffee":5,"core/events.coffee":6,"core/filter.coffee":7,"core/layout.coffee":8,"core/model.coffee":9,"core/popup.coffee":10,"core/service.coffee":11,"core/view.coffee":12,"helpers/popup.coffee":13,"mithril":"mithril","monster.coffee":14,"underscore":"underscore"}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var ApiBase,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  slice = [].slice;

ApiBase = (function() {
  ApiBase.prototype._get = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'GET', name, data, success, error);
  };

  ApiBase.prototype._post = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'POST', name, data, success, error);
  };

  ApiBase.prototype._put = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'PUT', name, data, success, error);
  };

  ApiBase.prototype._delete = function(tn, a, name, data, success, error) {
    if (data == null) {
      data = {};
    }
    return this._request(tn, a, 'DELETE', name, data, success, error);
  };

  ApiBase.prototype._request = function(tn, a, kind, url, data, success, error) {
    var ev_error, ev_success;
    ev_success = function(data) {
      $broadcast(tn + "/" + a, data);
      if (success) {
        success(data);
      }
      return data;
    };
    ev_error = function(data) {
      $broadcast(tn + "/" + a + "#err", data);
      if (error) {
        error(data);
      }
      return data;
    };
    if (this.preload) {
      return function() {
        data = _iso_preload[tn + "/" + a];
        if (success) {
          success(data);
        }
        return data;
      };
    } else {
      return m.request({
        method: kind,
        url: url,
        data: data,
        config: this._config
      }).then(ev_success, error);
    }
  };

  ApiBase.prototype._config = function(xhr) {
    return xhr.setRequestHeader('X-CSRF-Token', $dom.get("meta[name='csrf-token']")[0].content);
  };

  ApiBase.prototype._extract_id = function(model) {
    if (typeof model === 'string' || typeof model === 'number') {
      return model;
    } else {
      return model.id;
    }
  };

  ApiBase.prototype.path = function() {
    var a, args, i, len, path;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    path = [];
    if (this.namespace) {
      path.push(this.namespace);
    }
    for (i = 0, len = args.length; i < len; i++) {
      a = args[i];
      path.push(a);
    }
    path = path.join('/');
    return "/" + path;
  };

  ApiBase.prototype._resource = function(tn, options) {
    var action, i, len, method, o, only, ref, ref1, ref2, results;
    only = {
      index: true,
      "new": true,
      create: true,
      show: true,
      edit: true,
      update: true,
      destroy: true
    };
    if (typeof options === 'string') {
      only = {
        index: false,
        "new": false,
        create: false,
        show: false,
        edit: false,
        update: false,
        destroy: false
      };
      ref = options.split(' ');
      for (i = 0, len = ref.length; i < len; i++) {
        o = ref[i];
        only[o] = true;
      }
    }
    this[tn] = {};
    if (only.index) {
      this[tn].index = (function(_this) {
        return function(params, success, error) {
          return _this._get(tn, 'index', _this.path(tn), params, success, error);
        };
      })(this);
    }
    if (only["new"]) {
      this[tn]["new"] = (function(_this) {
        return function(params, success, error) {
          return _this._get(tn, 'new', _this.path(tn, 'new'), params, success, error);
        };
      })(this);
    }
    if (only.create) {
      this[tn].create = (function(_this) {
        return function(params, success, error) {
          return _this._post(tn, 'create', _this.path(tn), params, success, error);
        };
      })(this);
    }
    if (only.show) {
      this[tn].show = (function(_this) {
        return function(model, params, success, error) {
          return _this._get(tn, 'show', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    if (only.edit) {
      this[tn].edit = (function(_this) {
        return function(model, params, success, error) {
          return _this._get(tn, 'edit', _this.path(tn, _this._extract_id(model), 'edit'), params, success, error);
        };
      })(this);
    }
    if (only.update) {
      this[tn].update = (function(_this) {
        return function(model, params, success, error) {
          return _this._put(tn, 'update', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    if (only.destroy) {
      this[tn].destroy = (function(_this) {
        return function(model, params, success, error) {
          return _this._delete(tn, 'destroy', _this.path(tn, _this._extract_id(model)), params, success, error);
        };
      })(this);
    }
    ref1 = options.collection;
    for (action in ref1) {
      method = ref1[action];
      this._collection(tn, action, method);
    }
    ref2 = options.member;
    results = [];
    for (action in ref2) {
      method = ref2[action];
      results.push(this._member(tn, action, method));
    }
    return results;
  };

  ApiBase.prototype._collection = function(tn, a, method) {
    var fun, name;
    name = this.path(tn, a);
    fun = (function() {
      switch (method) {
        case 'get':
          return (function(_this) {
            return function(params, success, error) {
              return _this._get(tn, a, name, params, success, error);
            };
          })(this);
        case 'post':
          return (function(_this) {
            return function(params, success, error) {
              return _this._post(tn, a, name, params, success, error);
            };
          })(this);
        case 'put':
          return (function(_this) {
            return function(params, success, error) {
              return _this._put(tn, a, name, params, success, error);
            };
          })(this);
        case 'destroy':
          return (function(_this) {
            return function(params, success, error) {
              return _this._delete(tn, a, name, params, success, error);
            };
          })(this);
      }
    }).call(this);
    return this[tn][a] = fun;
  };

  ApiBase.prototype._member = function(tn, a, method) {
    var fun;
    fun = (function() {
      switch (method) {
        case 'get':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._get(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'post':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._post(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'put':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._put(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
        case 'destroy':
          return (function(_this) {
            return function(model, params, success, error) {
              return _this._delete(tn, a, _this.path(tn, model.id, a), params, success, error);
            };
          })(this);
      }
    }).call(this);
    return this[tn][a] = fun;
  };

  function ApiBase() {
    this._member = bind(this._member, this);
    this._collection = bind(this._collection, this);
    this._resource = bind(this._resource, this);
    this.path = bind(this.path, this);
    this._extract_id = bind(this._extract_id, this);
    this._config = bind(this._config, this);
    this._request = bind(this._request, this);
    this._delete = bind(this._delete, this);
    this._put = bind(this._put, this);
    this._post = bind(this._post, this);
    this._get = bind(this._get, this);
    var options, ref, table_name;
    this.preload = typeof _isomorphic !== 'undefined';
    ref = this.resources;
    for (table_name in ref) {
      options = ref[table_name];
      this._resource(table_name, options);
    }
  }

  return ApiBase;

})();

module.exports = ApiBase;


},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $comp;

$comp = function(tag, name, data) {
  var base, names;
  names = name.split('/');
  if ((base = app.store)[name] == null) {
    base[name] = {};
  }
  return m(tag, app[names[0]][names[1]].view(app[names[0]][names[1]].controller(data)));
};

module.exports = $comp;


},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $controller, set_args,
  slice = [].slice,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

set_args = function(target, args) {
  var arg_name, attr, i, len, results;
  results = [];
  for (i = 0, len = args.length; i < len; i++) {
    arg_name = args[i];
    if (typeof arg_name === 'object') {
      results.push((function() {
        var results1;
        results1 = [];
        for (attr in arg_name) {
          results1.push(target[arg_name[attr]] = new app.services[arg_name[attr]]);
        }
        return results1;
      })());
    } else {
      results.push(target[arg_name] = new app.services[arg_name]);
    }
  }
  return results;
};

$controller = function() {
  var __fun, args, base, definition, i, name, name1, name2, names, super_def;
  name = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), definition = arguments[i++];
  __fun;
  names = name.split('/');
  app.store[names[0] + "/" + names[1]] = {};
  if (app[name1 = names[0]] == null) {
    app[name1] = {};
  }
  if ((base = app[names[0]])[name2 = names[1]] == null) {
    base[name2] = {};
  }
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      this.store = bind(this.store, this);
      this.$export = bind(this.$export, this);
      this.$on = bind(this.$on, this);
      set_args(this, args);
      this.__fun = __fun;
      this.$ = {};
      this._name = name;
      this._controller = names[0];
      this._action = names[1];
      this.Api = new app.services.Api();
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.$on = function(name, fun) {
      return $register(this._name, name, fun);
    };

    _Class.prototype.$export = function() {
      var arg, args, j, len, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (j = 0, len = args.length; j < len; j++) {
        arg = args[j];
        results.push(this.$[arg] = this[arg]);
      }
      return results;
    };

    _Class.prototype.param = function(name) {
      return m.route.param(name);
    };

    _Class.prototype.store = function(val, input) {
      var key;
      key = this._controller + "/" + this._action;
      if (input === void 0) {
        return app.store[key][val];
      } else {
        return app.store[key][val] = input;
      }
    };

    return _Class;

  })(definition);
  __fun = function() {
    return new super_def(arguments).$;
  };
  return app[names[0]][names[1]].controller = __fun;
};

module.exports = $controller;


},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  "$dom": {
    get: function(sel) {
      return document.querySelectorAll(sel);
    },
    addClass: function(el, class_name) {
      if (el.classList) {
        return el.classList.add(class_name);
      } else {
        return el.className += ' ' + class_name;
      }
    },
    removeClass: function(el, class_name) {
      if (el.classList) {
        return el.classList.remove(class_name);
      } else {
        return el.className = el.className.replace(new RegExp('(^|\\b)' + class_name.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
      }
    }
  },
  "$loc": function(n) {
    return document.body.setAttribute('location', n);
  },
  "$stop": function(e) {
    if (e.prevDefault) {
      e.prevDefault();
    }
    if (e.stopPropagation) {
      e.stopPropagation();
    }
    e.cancelBubble = true;
    return e.returnValue = false;
  }
};


},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  "$broadcast": function(name, data) {
    var fun, key, ref, results;
    if (name !== "" && app.events[name]) {
      ref = app.events[name];
      results = [];
      for (key in ref) {
        fun = ref[key];
        if (fun) {
          results.push(fun(data));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  },
  "$register": function(_scope, name, fun) {
    var base;
    if ((base = app.events)[name] == null) {
      base[name] = {};
    }
    return app.events[name][_scope] = fun;
  }
};


},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
module.exports = {
  "$filter": function(name, definition) {
    return $f[name] = definition;
  },
  "$f": {}
};


},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $layout;

$layout = (function(_this) {
  return function(ctrl, content, opts) {
    var data, kind;
    if (opts == null) {
      opts = {};
    }
    kind = opts.layout || 'application';
    data = {
      content: content,
      ctrl: ctrl
    };
    return app.layouts[kind].view(data);
  };
})(this);

module.exports = $layout;


},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $model,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$model = function(name, definition) {
  var __fun, super_def;
  if (definition) {
    super_def = (function(superClass) {
      extend(_Class, superClass);

      function _Class() {
        this.reset = bind(this.reset, this);
        this.params = bind(this.params, this);
        this._init = bind(this._init, this);
        this._init();
      }

      _Class.prototype._init = function() {
        var k, ref, results, v;
        this.$ = {
          params: this.params,
          reset: this.reset
        };
        this.$.id = m.prop(null);
        ref = this.columns;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(this.$[k] = m.prop(v));
        }
        return results;
      };

      _Class.prototype.params = function() {
        var attrs, k, ref, v;
        attrs = {};
        ref = this.columns;
        for (k in ref) {
          v = ref[k];
          attrs[k] = this.$[k]();
        }
        return attrs;
      };

      _Class.prototype.reset = function() {
        var k, ref, results, v;
        this.$.id(null);
        ref = this.columns;
        results = [];
        for (k in ref) {
          v = ref[k];
          results.push(this.$[k](v));
        }
        return results;
      };

      return _Class;

    })(definition);
    __fun = function() {
      return new super_def().$;
    };
    return app.models[name] = __fun;
  } else {
    if (app.models[name]) {
      return new app.models[name]();
    } else {
      return null;
    }
  }
};

module.exports = $model;


},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $popup;

$popup = (function(_this) {
  return function(name, data, opts) {
    var content, ctrl, names;
    if (data == null) {
      data = {};
    }
    if (opts == null) {
      opts = {};
    }
    names = name.split('/');
    ctrl = app[names[0]][names[1]].controller(data);
    content = app[names[0]][names[1]].view(ctrl);
    ctrl.content = content;
    ctrl.opts = opts;
    return app.layouts.popup.view(ctrl);
  };
})(this);

module.exports = $popup;


},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $service,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$service = function() {
  var args, definition, i, name, super_def;
  name = arguments[0], args = 3 <= arguments.length ? slice.call(arguments, 1, i = arguments.length - 1) : (i = 1, []), definition = arguments[i++];
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(definition);
  return app.services[name] = super_def;
};

module.exports = $service;


},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var $view,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

$view = function(name, definition) {
  var __fun, base, name1, name2, names, super_def;
  names = name.split('/');
  if (app[name1 = names[0]] == null) {
    app[name1] = {};
  }
  if ((base = app[names[0]])[name2 = names[1]] == null) {
    base[name2] = {};
  }
  super_def = (function(superClass) {
    extend(_Class, superClass);

    function _Class(ctrl) {
      this.$ = ctrl;
    }

    _Class.prototype.param = function(name) {
      return m.route.param(name);
    };

    return _Class;

  })(definition);
  __fun = function(ctrl) {
    var klass;
    klass = new super_def(ctrl);
    return klass.render();
  };
  return app[names[0]][names[1]].view = __fun;
};

module.exports = $view;


},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var Popup,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Popup = (function() {
  Popup.prototype.pull = false;

  Popup.prototype.params = function() {
    var attrs;
    attrs = {};
    attrs["" + this._controller] = this.$.model.params();
    return attrs;
  };

  Popup.prototype.attrs = function() {
    return {};
  };

  function Popup(args) {
    this._register = bind(this._register, this);
    this.can_pull = bind(this.can_pull, this);
    this.error = bind(this.error, this);
    this.success = bind(this.success, this);
    this.custom_success = bind(this.custom_success, this);
    this.edit_success = bind(this.edit_success, this);
    this.submit = bind(this.submit, this);
    this.cancel = bind(this.cancel, this);
    this.pop = bind(this.pop, this);
    this.attrs = bind(this.attrs, this);
    this.params = bind(this.params, this);
    var key, name, ref, val;
    name = this._controller + "_" + this._action;
    this.$.popup_class = name + "_popup";
    ref = args[0][name];
    for (key in ref) {
      val = ref[key];
      this.$[key] = val;
    }
    this.$.data = null;
    this.$export('submit', 'cancel');
    this._register();
  }

  Popup.prototype.pop = function(data) {
    this.$.pop(true);
    switch (this._action) {
      case 'edit':
        if (this.can_pull('edit')) {
          return this.Api[this._controller].edit(data.model, this.attrs());
        }
        break;
      case 'form':
        if (data.model.id) {
          return this.Api[this._controller].edit(data.model, this.attrs());
        }
        break;
      default:
        if (this.can_pull()) {
          return this.Api[this._controller][this._action](data.model, this.attrs());
        }
    }
  };

  Popup.prototype.cancel = function() {
    return this.$.pop(false);
  };

  Popup.prototype.submit = function(e) {
    $stop(e);
    if (this.$.model && this.$.model.id()) {
      this.Api[this._controller].update(this.$.model.id(), this.params());
    } else {
      this.Api[this._controller].create(this.params());
    }
    return false;
  };

  Popup.prototype.edit_success = function(data) {
    var k, results, v;
    if (this.$.model) {
      results = [];
      for (k in data) {
        v = data[k];
        if (this.$.model[k]) {
          results.push(this.$.model[k](v));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Popup.prototype.custom_success = function(data) {
    var k, results, v;
    if (this.$.model) {
      results = [];
      for (k in data) {
        v = data[k];
        if (this.$.model[k]) {
          results.push(this.$.model[k](v));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  Popup.prototype.success = function(data) {
    return this.$.pop(false);
  };

  Popup.prototype.error = function(data) {
    return this.$.err = data;
  };

  Popup.prototype.can_pull = function(name) {
    if (_.is_array(this.pull)) {
      return _.any(this.pull, function(n) {
        return n === name;
      });
    } else {
      return this.pull;
    }
  };

  Popup.prototype._register = function() {
    var path;
    if (this._action === 'form') {
      this.$on(this._controller + "/new#pop", this.pop);
      this.$on(this._controller + "/edit#pop", this.pop);
      this.$on(this._controller + "/form#pop", this.pop);
    } else {
      this.$on(this._controller + "/" + this._action + "#pop", this.pop);
    }
    path = this._controller;
    switch (this._action) {
      case 'new':
        this.$on(path + "/new", this.new_success);
        this.$on(path + "/create", this.success);
        this.$on(path + "/create#err", this.err);
        break;
      case 'edit':
        this.$on(path + "/update", this.success);
        this.$on(path + "/destroy", this.success);
        this.$on(path + "/update#err", this.err);
        if (this.can_pull('edit')) {
          this.$on(path + "/edit", this.edit_success);
        }
        break;
      case 'form':
        this.$on(path + "/new", this.new_success);
        this.$on(path + "/create", this.success);
        this.$on(path + "/create#err", this.err);
        this.$on(path + "/update", this.success);
        this.$on(path + "/destroy", this.success);
        this.$on(path + "/update#err", this.err);
        if (this.can_pull('edit')) {
          this.$on(path + "/edit", this.edit_success);
        }
        break;
      default:
        this.$on(path + "/" + this._action, this.custom_success);
        this.$on(path + "/" + this._action + "#success", this.success);
        this.$on(path + "/" + this._action + "#err", this.err);
        this.$on(path + "/update", this.success);
        this.$on(path + "/update#err", this.err);
    }
    return true;
  };

  return Popup;

})();

module.exports = Popup;


},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var api_loaded, app;

if (typeof _isomorphic !== 'undefined') {
  m.route = {
    param: function(key) {
      return _iso_param[key];
    }
  };
}

api_loaded = false;

app = {
  events: {},
  models: {},
  services: {},
  util: {},
  store: {},
  preload: {}
};

window.app = app;

window.api_loaded = api_loaded;

module.exports = app;


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
